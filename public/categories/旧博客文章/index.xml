<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>旧博客文章 on 極客死亡計劃</title>
    <link>http://localhost:1313/categories/%E6%97%A7%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</link>
    <description>Recent content in 旧博客文章 on 極客死亡計劃</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 02 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/%E6%97%A7%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>无事升华之瘾症</title>
      <link>http://localhost:1313/posts/%E6%97%A0%E4%BA%8B%E5%8D%87%E5%8D%8E%E4%B9%8B%E7%98%BE%E7%97%87/</link>
      <pubDate>Tue, 02 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E6%97%A0%E4%BA%8B%E5%8D%87%E5%8D%8E%E4%B9%8B%E7%98%BE%E7%97%87/</guid>
      <description>无论是什么样的文本，正式的还是非正式的，小说还是非小说，专业的还是业余的，俗的还是雅的，人们似乎都期待在结尾看到一次对文本内容的主题提升，无论是否适宜。&#xA;就比如，一篇写非物质文化遗产的文章，在结尾多半会提到文化自信。这当然无可厚非，似乎是理所当然的事情；但有的文章，它所表达的思想并不值得一次升华，或者是它本身要表达的内容就足以使人受益，要把这种结尾升华的写作范式套用到上面去，就会显得十分别扭，至少我是这么认为的。&#xA;可惜的是，大部分人不这么认为。这样的一篇文章，作者在得到除了「你可以把语言组织得更有逻辑」之外的建议，很有可能还有「你可以在结尾升华一下」；如果作者真的这么做了，把文章发表出来，得到的评价里也可能会有「结尾升华，很好！」之类的赞许。&#xA;我本身不是文学专业，对汉语言也没有什么研究，所以，关于「升华」的手法能不能通用，我也不能给出什么好的观点。但作为一个读者，或者更广泛地说，一个信息的接收者和评判者，因为我前文说的「文章」其实也可以换成「播客」「影视」「视频」等其他的媒介，一些无中生有的升华确实影响了体验。&#xA;这年头写文章和做播客的，文字水平基本都超越了大多数人，不过也大多是我这样的业余者滥竽充数；在大众视野下的视频博主们也极少有文字功底很强的，其中也有不少只靠天赋、灵感和日常积累写文案的，或许对写文章没有太多细致深入的思考。&#xA;当然，我不是说在结尾升华就是「不会写文章」的表现，我只是在某一天偶然在某一个视频下读到了一条称赞博主视频的升华内容的评论，觉得那升华实在别扭，所以有了些思考。我相信写文笔极佳的作者是不会写出令人感到别扭的内容的。&#xA;也就是说，我观察到的现象是，包括我在内的不少业余者，酷爱在文本的末尾进行升华，把这种手法当作一种必需的模板来使用了，然而自己用得不太对，写得也不算好，影响了作品的观感。&#xA;我想，人们热衷于升华，也是出于对作品质量的追求。根据峰终定理（Peak-End Rule），作品给读者的阅读体验好与否，主要看中间最精彩的部分，和结尾的部分。如果结尾过于平淡，似乎就会掩盖掉之前的亮点。小学老师说作文要「虎头凤尾」，大概也是这个原因。对于一般的文章，尤其是那些本身不源自作者自己的思考、仅仅是为了完成任务而作的文章，它们并没有令人拍手叫绝的观点或描写，就只能在结尾放上一个能让人产生共鸣的看似精彩的段落，至少不会让人低看作者的文字功底。&#xA;如果从这个角度看，不少人喜欢无事升华的根本原因是写作目的不纯粹和写作技巧待打磨。&#xA;所谓写作目的不纯粹，就是指作者写文章并不是为了表达自己的观点。这样的作者可能是在完成某个任务、参加一个命题的征文比赛，或者在进行语文考试。不过，这里提到的写作都是被动的，也有主动写作，但目的仍然不纯的。我在后室中文维基担任版主，这是一个多人协作的、共享世界观的网络小说平台，站内大多数人都是 17 岁出头；尽管我们有年龄限制，但还是有不少初中生和高中生，甚至是小学生自己建立起社区进行创作。维基上的很多作品没有什么内涵，这对于网络俗文学来说倒不是什么问题，但很多作品在构思和谋篇布局上都有很大问题。他们写作的目的可能是因为热爱，也可能是为了在社区内获得名气，但无论是什么，他们很少真的对自己写的东西有什么真情实感，只是想让作品得到更多人的喜欢和认可。因为这样的目的，他们很少会真正地打磨自己的文笔，追求的更多是「高产」和「高分」。&#xA;我举的例子只是我观察到最多、感受最深的。其实这种以「为了创作而创作」「为了粉丝而创作」「为了热度而创作」，而不是「为了思想而创作」「为了想法而创作」「为了信仰而创作」为写作目的很多，在自媒体平台上能一抓一大把，比如《动物园规则怪谈》火起来之后井喷式爆发的各种俗套、没抓住规则怪谈精髓的作品（当然也有很多好作品，不过要少一些就是了），在逗比的雀巢火起来之后各种用福尔摩斯和多啦 A 梦动画片片段拼成的「搞笑」短片，我自己也因为喜欢某个热潮而创作过一些质量低下的作品。&#xA;我不是在批评这样的作者，毕竟这样写出来的作品的确有不少值得一读，具有娱乐价值或启发意义的，作者和读者也都能从中获得价值，但它们的质量也的确良莠不齐，和正经写文章的比不了。&#xA;所谓的写作技巧待打磨，就是指作者不明白什么时候升华、有没有必要升华、怎么升华。我不敢说自己很清楚这个问题的答案，但我自己写文章时确实有思考过这些问题。我认为，如果写作的主题与一个更大的主题有着较强的关联，适当的升华可以扣住这个大主题，让读者对自己写的更小的主题有更深的认识。也就是说，尽管升华的目的是应用终峰定理，提升阅读体验，但基本的解释观点的作用必不可少。如果一段话对读者理解作者的思想没有帮助，那就没有必要写。&#xA;至于升华，在我看来，是多了词藻和修辞修饰的总结和链接。总结是对前文观点的聚合，链接是与相关主题的联系。也就是说，升华要和全文内容高度相关，也要和一个更高的主题高度相关。前文提到的「非物质文化遗产」与「文化自信」的关系，就是一种适当的升华，这样的文章往往会提到某种非遗的起源、历史故事、制作工艺、发展历程、对国内外的影响以及它的地位和意义，而这些内容都反映了国家从古代到现代的文化，可以用「文化」来进行总结；而「文化」与「文化自信」这个大主题相关，可以进行链接，提到认同与传承文化和文化自信的意义；这个主题还能进一步与更高的主题链接，可以谈到民族情感和家国情怀。&#xA;完成了总结和链接，帮助读者理解作者思想的目的就完成了，升华还需要完成它成为凤尾的意义，这就得靠作者自己的文字功底了。&#xA;写到这里，我似乎理清楚了什么是升华、为什么要升华和要怎么升华的问题，但实不相瞒，我写这篇文章的目的并非为此，我还有一个自己没想明白的问题没回答：一定要升华吗？&#xA;我再挪用之前有关非物质文化遗产的例子，如果我写了一篇关于打铁花的文章，我不能只描写打铁花的叹为观止和表演者的精湛技艺吗？如果我把这些内容写到极致，让没看过打铁花的人像是身临其境一般感受到了打铁花的美，激起了人们的热情和对非物质文化遗产的认知，那还不够吗？我一定得在结尾提到更大的主题吗？如果我不写，对读者的阅读体验会有什么影响吗？会妨碍读者理解我传达的信息吗？&#xA;你可能会说，升华了自然更好——可这样做的理由是什么？为什么会更好？因为文章与更大的主题产生关联了吗？但为什么越大的主题就越好呢？如果真是这样，我为什么不能直接写更大的主题，非要将小主题与大主题关联呢？&#xA;如果我再用非遗的例子就没什么说服力了，我就换一个小说的例子吧。江户川乱步有一部叫做《大青虫》的短篇，写的是一位军人的妻子，在自己的丈夫因战争而失去四肢后仍然细心照顾丈夫，却发现自己渐渐地对丈夫有了一种奇怪的情感，把近乎无能的丈夫当作自己发泄欲望的工具，到了最后，她甚至看不惯丈夫眼里有任何人类的眼神，险些失去理智伤害丈夫。在故事的最后，丈夫逃走了，像一只大青虫一样扭动身子，一头栽进了旧井里。这篇故事的结尾是妻子的想象，在看到丈夫以这样的姿势自尽时，他联想到了一只在树枝上爬行的大青虫，最后树枝折断，大青虫掉到了地上。&#xA;在这个想象里，大青虫和树枝都有所象征，树枝断裂的这个事件也有所象征，如果你仔细品味就能感受到。江户川乱步这个作者很擅长这样平缓又引人深思的结尾，这样的结尾对全文做了总结，强调了自己想要表达的想法，但并没有链接到更高的主题。&#xA;同样的这篇故事，换做是其他人写，尤其是我这样的业余者，可能就不会这样结尾了，很有可能会扯到女性的困境、伤残者的尊严等话题，但事实上，这篇文章就算不升华，也引发了相关的思考，强行升华不仅变扭还显得累赘，比起凤尾，更像是画蛇添足。&#xA;由于没有更好的点子，在结尾处升华似乎又是公认的「好」的写作技巧，于是大多数人就这么做了，还能给自己本身没有什么思想的文章镶金边。甚至说，包括我在内的很多人，从前可能根本没想过除了结尾升华，可以有其他的收束全文的方式。&#xA;不过，写了这么多，我想到其他的方法了吗？</description>
    </item>
    <item>
      <title>Profitez de votre vie.</title>
      <link>http://localhost:1313/posts/profitez-de-votre-vie/</link>
      <pubDate>Wed, 20 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/profitez-de-votre-vie/</guid>
      <description>去年的 年终总结 洋洋洒洒写了一万字，竟然漏掉了我在去年做出的一项重要决定。大概是因为坚持到现在，已经成为习惯了，所以不觉得很重要吧。这件事情确实说大不小的，但讲给其他人听的时候，对方还是会感到惊讶或是赞许——我在高考后的暑假开启了法语学习。&#xA;Oui, vous avez bien entendu.&#xA;与语言的缘分 我一直都想学一门英语以外的外语，甚至更多，因为我觉得掌握多门语言是一件很酷的事情。之前在 Bilibili 上看到一位 up 主采访一名会讲二十多门语言的老人，看见视频里的两个人用中文、英语和日语聊天觉得很有意思，不只是因为两人在交谈时能够在多门语言之间无缝切换，也有感受到这位老人印在灵魂里的「有趣」，真的能看出那位老人的博学，以及他侃侃而谈时的自信和对语言的热爱。当时我就想，等我老了，我一定要做一个有意思的老头子。&#xA;至于为什么选择法语，其实并非是因为那些有关法语的刻板印象（像是法语很浪漫、法语很性感之类的说辞），所以一直心心念念想要学法语，而是当我第一次打开 Duolingo 的时候，列表上为数不多供中文母语者学习的语言里，只有法语最吸引我。嗯，其实就是凭感觉稀里糊涂瞎选的。&#xA;刚刚谈到的法语的刻板印象，其实多少也会有，我似乎一直感觉法语是一门优雅的语言。这应该是因为受到了文化的耳濡目染。诺曼征服之后，英格兰从政治制度和语言文化上都永久地改变了；在那个时代，几乎所有的达官贵族都说法语，英语里有许多常用词汇都源自于法语；到现在，我们也能在一些较为古典的音乐剧或者一些人物个性鲜明的电视剧里，听到不少法语词汇。我有印象的是《歌剧魅影》里经常用 monsieur 代替 my sir（当然这与原著本来就是法国人写的也有关系），《Hamilton》里也有一个重要角色是法国人，还有不少著名的音乐剧都是用法语演出的。至少对我来说，法语很容易和古典、高雅等词语联系起来。&#xA;一方面是因为对法语有这样的印象，另一方面也是因为我对其他语言几乎没有什么印象，学日语的话又懒得背五十音图，而且自己也不是二次元，所以选了法语。&#xA;令人无语的猫头鹰 现在我的 Duolingo 连胜记录已经是 238 天了，不过我还是不能确定自己是否真正入门。至少，在尝试说一个完整的句子时，我还是不免会因为不了解某些单词或语法而停下来查阅，不过这个过程也还算有意思。&#xA;一开始，Duolingo 的教学方法给我一种领先时代但又有些像幼儿园老师的美，可学语言不就得从小孩子的白话开始嘛。话是这么说，Duolingo 的题目却时常有种反人类的怪异感，有点像是把学过的单词按照正确的语法组合起来，筛掉了一些如「无色的绿色想法愤怒的睡觉」一类的逆天句子，但还是有漏网之鱼。当我看到一个卡通小屁孩一脸正经地跟我说「J&amp;rsquo;ai besoin de seize salles.（我需要十六个大厅）」的时候，我真的觉得又好笑又好气。&#xA;What you gonna do with them, you freaking bastard.&#xA;抛开这些鸡毛蒜皮，Duolingo 听说式的学习方法也还算不错，单元之间不断地重复练习也能让人更深刻地记住一个单词和语法知识。尽管 Duolingo 给每一章节都提供了语法知识手册，但我几乎没有点开看过，因为只要做几道题，听几个句子就能大概弄明白。等有了一定的语法基础，再去看更专业、更详尽的语法书，会是更好的选择。&#xA;Duolingo 在宣传的时候常常把自己的教学方式比喻成「做游戏」，以此来吸引眼球，因此的确有不少人认为在 Duolingo 学语言就是在玩游戏。最近我在少数派上读到一篇讲语言学习的文章，作者就是这么发表他对 Duolingo 的看法的。Duolingo 上学语言没那么严肃是真的，有不少游戏元素也是真的，但也不至于是收效极低的「玩」。&#xA;当然，我不是在维护 Duolingo 课程的有效性，因为比起最适合我的学习方式（which is yet to be found），它的效率的确不怎么高，大概是为了照顾到大多数人（我一直觉得自己还是有一些语言天赋的）。**Duolingo 的体系对我影响最大的点是养成了每天学一点的习惯。**它在对游戏设计的借鉴当中最成功的一项就是排行榜的设计——每一周用户都会和其他人一起竞争，排在前面的人才有机会进入下一个等级，否则就留在当前等级，或者因为排名太靠后而掉回上一个等级；排名的依据是在每一次学习之后积攒的「经验」，每周揭榜后都会清空。这个设计不仅让用户为了保住排名而每天坚持学习，还会因为等级越高而变得越来越卷，不得不每天学习更多的内容赚取更多的经验。&#xA;另外，Duolingo 的宣传，从商业的角度看，也是成功的。一方面，Duolingo 官方有在运营自己的社交媒体，而且不只是每天发文单纯做宣传，还会在其他品牌、产品、游戏甚至是艺人的推文下留言（看到 Duolingo 这个语言学习 App 和《咩咩启示录》这个不正经的游戏之间在推文下互动的时候还觉得挺魔幻的），最好笑的是 Duolingo 还会做有关自己品牌形象的 Meme（他们的吉祥物是一只绿色的猫头鹰，我印象最深刻的是他们在推特上恶搞了好几张流行专辑的封面，把图片上的歌手都换成了这只猫头鹰，其中恶搞 Taylor Swift 重录版《Red》的那张成为了我的新微信头像）。</description>
    </item>
    <item>
      <title>Manjaro 桌面折腾记</title>
      <link>http://localhost:1313/posts/manjaro-%E6%A1%8C%E9%9D%A2%E6%8A%98%E8%85%BE%E8%AE%B0/</link>
      <pubDate>Wed, 14 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/manjaro-%E6%A1%8C%E9%9D%A2%E6%8A%98%E8%85%BE%E8%AE%B0/</guid>
      <description>我的本科导师在大一刚开学，还未正式行课的时候，给我们发了一份二十多页的 Word 文档，要求我们在两周内按照文档的指导自行安装 Windows 和 Manjaro 的双系统，原因是程序设计作业需要在 Linux 系统上编写、调试和运行。&#xA;我向来不喜欢未经思考就接受别人交给我的任务，所以当我面对这一个多少有些强人所难的要求和一份三十多 GB 出头的定制系统文件时，我是很抗拒的。&#xA;于是，当天我就尝试了 Arch Linux 的 WSL（Windows Sub-system for Linux，适用于 Windows 的 Linux 子系统）和虚拟机安装 Manjaro 系统这两个自以为聪明的方案。除了个别基础不错的同学，其他不少刚接触计算机的大学生连续几周都被安装系统这个任务搞得心神不宁，而我还泡在自己的舒适圈里，在 Windows 11 系统上畅玩各种电子游戏。&#xA;故事讲到这里，你一定会期待一段这样的情节——一个刚获得些许自由的大学生我行我素，最后被残酷的现实击倒在地，开始后悔自己为什么没有早点醒悟。&#xA;好吧，或许你没有，我也没有为了我自己的决定后悔。安装双系统的做法的确不太聪明，不但麻烦，真正发挥用武之地的地方又很少，只能算是一个对大部分人都有效的解决方案。而当我掏出我的第二台笔记本电脑，阁下又该如何应对？&#xA;冷淡的接待 我有一台陪伴了我整个高中的戴尔灵越轻薄本，在我毕业之后光荣退役，因为我有了一台性能更好的游戏本。于是这台笔记本一直闲置了好几个月，不过这下终于有用武之地了。我决定在这台并不常用的电脑上安装 Manjaro 系统，以应付作业的需求。&#xA;由于我打算完全抛弃之前旧的 Windows 系统，安装一个单独的 Manjaro 系统，而导师提供的文档却只给出了双系统的操作指导，其中涉及到各种复杂的分区，大部分内容对我没有太大的参考价值。于是我先根据文档制作用于安装系统的启动盘，我得先从 Manjaro 官网上下载 KDE 版本的系统镜像，然后用 Ventoy 和一个 U 盘制作启动盘，系统安装好之后再把导师发在群里的三十多个 GB 的系统快照在安装好的新系统上恢复，省区自己安装软件的麻烦。&#xA;**不过我很快就把自己唯一的 U 盘搞坏了。**大概是在操作时出现了失误，又或是什么令人摸不着头脑的问题，我在按照教程使用 Ventoy 制作启动盘时，软件弹出了一个文档中没有提到的报错，然后我发现我无法在 Windows 中访问 U 盘了。于是我格式化 U 盘后并重新设置了分区，好在这个盘里没有什么重要数据。但第二次尝试的时候还是发生了同样的错误，第三次、第四次也一样。最后我还是放弃了，借用了室友已经制作好的启动盘。&#xA;后来我又照常使用这个被我格式化数次的 U 盘，结果在好几次拷贝文件的时候发现文件损坏。直到一次上台展示的时候，发现自己做好的 PPT 无法打开，才意识到这个 U 盘已经没办法正常使用了。我至今也没弄明白是哪一步出了问题。&#xA;由于 Manjaro 的安装程序有图形界面，只需要一些简单的配置就可以自动安装。我打算直接抹除原来的 Windows 系统，Manjaro 也在安装时提供了直接覆盖原系统的选项，不过我常试了几次都报错，表示无法正常安装。具体的细节我已经因为过了太久而遗忘了，但我记得我百思不得其解，被这个错误搞得焦头烂额，最后又在导师给的文档里找到了答案——好嘛，是我没改 BIOS 设置。</description>
    </item>
    <item>
      <title>我的思绪像河流</title>
      <link>http://localhost:1313/posts/%E6%88%91%E7%9A%84%E6%80%9D%E7%BB%AA%E5%83%8F%E6%B2%B3%E6%B5%81/</link>
      <pubDate>Fri, 09 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E6%88%91%E7%9A%84%E6%80%9D%E7%BB%AA%E5%83%8F%E6%B2%B3%E6%B5%81/</guid>
      <description>以往我有了什么想法都会整理成文字发布在博客上，或者在自己的日记里一笔带过。这其中有不少都在我反复折腾博客和喜新厌旧地换了好几个本子之后遗失了。当然这还不包括那些从我的脑海里飘过，还没来得及被我捕获就已经被忘记的点子，以及那些写到一半就突然没了感想，只得半途而废的想法。&#xA;我最近读了一篇文章，叫做 Networked Thoughts，题目是一个双关，既是「网状思维」，也是「与互联网连接的想法」。文中有一句话令我印象深刻：&#xA;We live in an information age. The amount of data we produce far outweighs what we consume, so much so that it has extended far beyond our ability to make meaningful use of it.&#xA;我们生活在信息时代。我们所产生的数据远大于我们消化的，已经庞大到远超过我们所能利用的范围。&#xA;至于为什么要强调信息时代，我想是因为信息科技给了我们太多产生数据的「原料」和「催化剂」，而且这些原料是网状生长的。比如，我是一个桌游爱好者，在以往，我关注的桌游就只有狼人杀、大富翁、海龟汤，一些信息平台的算法根据我现有的喜好开始向我推送阿瓦隆、Uno、不要做挑战等其他类型的桌游。假如我开始对平台推送的这些内容感兴趣，我很有可能又会收到 DOS、跑团、三国杀等更多同类内容的推送。&#xA;不过今天的主题并不是信息膨胀，而是在这样的背景下如何处理自己接收到的信息，让自己在茫茫的数据海洋中不至于太过迷茫。在这篇文章里，我会分享我是如何过滤、整理、归纳我在互联网上接收到的信息的，以及在这一过程中我使用了哪些工具。&#xA;建立自己的滤网 还记得这篇文章的标题吗？我说「我的思绪像河流」，让我来简单解释一下这个比喻。&#xA;这里的「思绪」指的并非信息本身，而是接收到信息之后产生的思考，因为这才是最重要的东西。这个比喻也（我自认为）很巧妙地排除了那些对个体缺少价值的信息，因为它们不会引发太多思考。当然，这个判断标准是很主观的，一篇与全素饮食和营养搭配相关的文章对我而言没有什么价值，但却是一个素食主义者很愿意参考和学习的。至于「河流」二字，一个是名词，一个是动词，这里强调的是流动性。总而言之，你可以把个体从各处接收到的信息抽象理解为一种数据流，流经个体的大脑。&#xA;为什么需要过滤？ 所有流经大脑的数据流都是要占用「CPU」的，如果数据量超出了人脑能够处理的范围，大脑就会陷入一种「不舒服」的状态。有一种说法把这种状态称为「信息综合征」，用我的话来说，就是人在接受了太多信息后放弃了思考，在未能思考和消化后就囫囵吞枣般地任由其进入自己的大脑里，脑子「噎住了」。这就像是做爱没有前戏一样，虽然很爽，但久而久之就少了很多情趣。&#xA;刷短视频就很容易陷入这种状态。在视频开始播放之前，自己也不知道自己看的什么；视频播放完之后，软件又自动帮你跳转到下一条视频，不给你思考的时间。不知不觉地，你就浪费了几个小时的睡觉时间，反应过来之后就像是做了个梦，除非有印象特别深刻的，否则根本记不起来自己刚才都看了些什么。而且，看完之后会觉得自己脑子成了一团浆糊，做事提不起精神，还莫名奇妙地兴奋，睡不着。&#xA;**这个问题的直接原因是信息量爆炸，解决方法当然和「吃胖了就减肥」一样逻辑简单，减少每天接收的信息就好了。**不过，和减肥一样，要减的是脂肪，而不是水分和肌肉，因此，评估信息的价值是必要的。在评估信息对自己是否有利之后，再决定是否接收。增加一个「过滤」的步骤，确保真正需要自己操心的都是值得花时间的内容。&#xA;从源头保证信息质量 不过，评估信息价值时会遇到一个问题——**如果我不接收并了解信息，我怎么知道它对我是否有价值？如果我为了评估价值而强迫自己接收信息，那我依然需要让数据流经过自己的大脑，这依然会耗费精力。**这又陷入一个罗素悖论了。&#xA;「问渠那得清如许？唯有源头活水来。」要在处理信息之前就大致了解信息的好坏，找对信息源是关键。&#xA;现在的互联网和以往有很大差异，这个差异从人和互联网关系的变化就能看出来。有关新旧搜索引擎的调侃屡见不鲜，这些调侃大致想要表达的就是：以前的搜索引擎会把你描述的东西直接呈现给你，而现在的浏览器会把广告放在最前面。还有一种说法，我已经忘记了我是从哪里读到的，大概想说的是：以前上网是自己找信息，而现在上网是平台向你主动展示信息，自己反而变得被动了。&#xA;自己寻找信息的时候，由于脑子里有一个明确的目标，会到相关平台，使用关键词检索，把信息的范围缩到最小；被动接受信息的时候，则是在一池子鱼龙混杂的信息中挑选中意的，像是矮子里挑高个。&#xA;在大部分情况下，对于个人而言，第一种情况是最好的。掌握主动权可以强迫自己独立思考，思考自己最需要的是什么，而不是让其他的东西帮自己做思考。当然，被动接受信息也是必要的，尤其是有娱乐需求的时候，不过这样的被动也是建立在自己的主动选择上的，也就是说，必须得让自己在确定的时间和确定的情况下被动接受信息，比如无聊了需要打发时间，或者是想要漫游互联网寻找写作题材。同时还需要利用正确的渠道和方法，不掉入资本设置的陷阱里，刷短视频总不能上美团和拼多多吧。&#xA;信息源专用化 比起有任何检索需求就都打开搜索引擎，在不同的场景选择不同的信息源明显是更好的选择。如果要找配图，那就上 Unsplash、Pixabay 和 Flickr 等专门的图片分享网站；如果要找图标，IconFinder 和 Icon Font 等矢量图库是更好的选择；如果要找专业相关的电子书，那就到 Z-Library 搜索；如果要查单词词源，就在 Etymonline 里查询；对于英文互联网的文字梗和俚语，也有专门的 Urban Dictionary 收录相关词条…… 有明确的需求时，这些信息源会提供比搜索引擎质量更高的结果。在专用的网站上检索信息时，不相关的内容自然就被过滤掉了，这也是滤网的一部分。</description>
    </item>
    <item>
      <title>剔除每一寸多余的杂质</title>
      <link>http://localhost:1313/posts/%E5%89%94%E9%99%A4%E6%AF%8F%E4%B8%80%E5%AF%B8%E5%A4%9A%E4%BD%99%E7%9A%84%E6%9D%82%E8%B4%A8/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%89%94%E9%99%A4%E6%AF%8F%E4%B8%80%E5%AF%B8%E5%A4%9A%E4%BD%99%E7%9A%84%E6%9D%82%E8%B4%A8/</guid>
      <description>我发觉最近总是在做减法——我删掉了 Chrome 书签里不常用的网站，舍弃了好多之前用过的互联网产品，移除了博客的后端，甚至还从用了十几年的全拼输入法转到了冷门的双拼输入。我意识到自己或许有某种奇怪的「洁癖」，不过这没什么好抱怨的，因为一切都在向让我感到舒服的方向发展。&#xA;从繁杂中脱身 先掸屋内尘 去年年末我写了一篇「新时代独立博客走弯路式搭建的最佳实践」，记录了我是如何又重写了一次博客的代码，然后重新捡起写博客的习惯的。我不乏基本的自知之明，那篇文章起这样的标题，就是因为我自己确实认为这个走弯路的方法不怎么聪明，我只不过是选择了当时令自己最舒服的方案而已。&#xA;在过去一个月的使用当中，我遇到了不少问题。由于 Next.js 的缓存机制，我在后端发布新文章之后，前端并不能及时更新，并且还因为 Vercel 构建的问题和我代码功底的薄弱导致了一些让人摸不着头脑的问题。结果就是每次有新文章发布，我都要在各个地方修修补补。跨年当晚，我定时发布了我的 年度总结，我还特地提前设置了一个 Cron Job，在文章发布后自动清除缓存，结果前端还是报错了。于是我在新年的前半个小时修好了 2024 年的第一个 Bug，想起来还挺好笑的。&#xA;我最终决定把文章数据都以 Markdown 文件的形式储存在项目目录下，毕竟在此之前我也一直在用 Typora 写博客。在简单评估了几个相关的 JavaScript 库之后我就开始动手了。花了两三天的时间和一次修 Bug 修到崩溃的工夫就做好了。&#xA;现在博客的构建速度比以前快了半分钟，我要做的也只是把写好的 Markdown 文件扔进 Git 仓库，提交 Commit 然后推送，还能水一水 GitHub 贡献。这么看来，我之前想要把项目维护和文章发布这两个流程分开的想法，对于个人博客来说没有必要，反而提高了成本。事情还是越简单越好。&#xA;这之后我还想过改用 MDX，这样就能在博客文章里用 React 组件，能实现不少花里胡哨的效果。不过进一步考虑过后，我放弃了这个想法，因为这样会让文章数据的可移植性变差，最重要的是，我写博客时应该关注文章本身，不需要额外的组件。&#xA;自我反思过后，我发觉自己在个人博客这一个项目上花的时间太多，把这些时间节约下来做其他的有意义的事情会更好，毕竟说到底，博客只需要保证基本的编写和阅读体验。&#xA;秋闱软月云梳翅 双拼作为中文输入方案已经出现很久了，但使用者不多，我也是最近才了解到。一方面觉得新奇，另一方面也确实觉得双拼十分聪明且省事——每个字，无论全拼的打法多长多短，都只需要按两下按键就能打出来。&#xA;双拼实际上是对全拼输入法的一个映射，用户可以自定义映射方案。我使用的是「小鹤双拼」，在这个方案中，声母 sh 被映射为 u，韵母 uang 和 iang 被映射为 l，所以用户只需要输入 ul 就能打出「双」字。&#xA;在双拼的打字方案中，用户输入的每两个字母被认为是一个汉字，这两个字母中的第一个是声母，第二个是韵母。零声母音节的处理有几个选项，在我选择的方案中，单字母的零声母音节需要把同一个字母输入两遍（如「啊 (aa)」）；如果本身就是两个字母，就输入本身；如果是三个字母，就只有 ang 的情况，输入 ah 即可。&#xA;虽然双拼在一些细节问题和部分常用语快打的情况下不如全拼，比如 xx 不能打出「谢谢」，只能打出「下」，但它对整体打字速度的提升是毋庸置疑的。另外一个我很喜欢双拼的点是打字时有很强的节奏感，因为每打一个字都需要按两下键盘。如果你也用机械键盘打字，大概也会喜欢上这种感觉。&#xA;相比五笔输入法，双拼的学习成本要低很多。我使用的「小鹤双拼」还有一段十分有趣的记忆口诀：&#xA;秋闱软月云梳翅，松拥黛粉更航安。&#xA;快莺两望奏夏蛙，撤草追鱼滨鸟眠。&#xA;第一句「秋闱软月云梳翅」中的「秋」可以按下两次 QWERTY 键盘的第一行第一个按键 Q 输入，因为 Q 既是声母 q 也是韵母 iu。同理，W 对应 w 和 ei，R 对应 r 和 uan，T 对应 (y)ue。以此类推，就可以记住所有的键位，再多加练习，一天内就能记住所有的按键，一周内能正常打字，至于再往后打字速度会有多大的提升，我不敢说，因为这也只是我用双拼输入法写的第一篇文章。</description>
    </item>
    <item>
      <title>毫无必要的热情</title>
      <link>http://localhost:1313/posts/%E6%AF%AB%E6%97%A0%E5%BF%85%E8%A6%81%E7%9A%84%E7%83%AD%E6%83%85/</link>
      <pubDate>Sun, 07 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E6%AF%AB%E6%97%A0%E5%BF%85%E8%A6%81%E7%9A%84%E7%83%AD%E6%83%85/</guid>
      <description>今天从床上爬起来，寝室里很暗，没人开灯，因为还有其他人没醒。每个周末的早晨都是如此，我慢慢地抓住扶手从上铺下来，尽量不发出声音，然后打开书桌上的小灯，橙色的，我总觉得它比寝室的白色日光灯更舒适。&#xA;在书桌前，我像每个早晨一样，百聊无赖地查收手机里的新消息，一条一条地删掉各种应用发给我的垃圾信息。明明有一键删除的按键，我却总是习惯浏览后再删除，不是害怕漏掉什么重要消息，或许是因为早就成了习惯。&#xA;房间里安静得我听得清自己的每一次呼吸，还有床板发出的嘎吱声。没人说话，我下意识地伸出手搓揉着我的头发——有些油，或许该洗了。我走出房间，闻到了空气里潮湿的泥土的气息，大概是下雨了。我站在洗手台前，先洗去了刚才留在手上的油污，听着水流的声音思考。或许抹点散粉就行了吧，反正周末我也不会出门的，但突然又有些担忧自己的发际线，还是拿着洗发水进了浴室，顺便冲了个澡。洗完之后，我推开笨重的玻璃门，房间里还是很暗，只有两盏台灯亮着。&#xA;我从架子上抽出一片洗脸巾，把内裤和袜子扔进盆里，用水和洗衣液泡着——我总觉得光是这么泡着都会比手搓更有效。终于洗漱完毕，我坐回了桌前，坐在我旁边的室友也起了，我突然不知道该干些什么。&#xA;我拿起我昨晚睡前列好的一张清单，上面写着我最近要完成的几件事情，当然，不包括期末复习。上面写着我一月要读的一本书，书名叫做《毫无必要的热情》。我记得我当初是因为被名字和封面吸引了才买下的它，在此前我从未听过有关这本书和它的作者的事情，我想这也算是一种缘分。我翻开书，读起了序言，笔者把这本书作者的语言称作「把冷静掺杂进热情，把戏谑编织进伤感」，还说了不少有关这个作者的故事。&#xA;我没有很感兴趣，也没有觉得无聊，便继续往后读。读到了第一篇，应该是随笔，叫做「这真的是异乡」。虽然我完全不能和作者「美国留学生」的身份产生共鸣，但她的笔触很有感染力，并不强烈，像是用掺了太多水的水彩颜料，给她故事里的每一个细节都涂上了一层淡淡的灰绿色彩。&#xA;我读完第一篇就把书合上了。我没能在抽屉里找到多余的书签，便从一幅塔罗里抽出一张多余的牌放进了书里。那副牌叫做「Lunalapin」，我知道 Luna 是月亮，这副牌的主角又全是小兔子，那 Lapin 大概是拉丁语里兔子的意思。&#xA;读散文和小说有很大不同，我第一次感受到。散文没有精心编排的故事那般引人入胜，但你能在平淡的语言里感受作者的所思所想。它不会给你太多的多巴胺吸引你一直读下去，就像是在咖啡馆里遇到有一些共同话题的陌生人，各自说了一些对方都有所感触的话，然后其中一个人的咖啡做好了，也就自然而然地离开了。在这之后，两人或许会在回家路上细细回味这次谈话，但没有人会高兴得在走路的时候跳起来。&#xA;这样的阅读体验，就像是一杯泡得有点淡的茶或者蜂蜜水，没有往常那么好喝，但意外地不错。&#xA;最后一位室友也起了，开了灯，我也就把我的小灯关掉了。已经快到中午，我还是没怎么说话，我换上鞋出门，估摸着出去取个快递再买完饭，时间应该刚好。我像往常一样掏出耳机戴上，决定今天听一点不一样的歌，于是点开了「告五人」的热门歌单。&#xA;路上的闲暇时间总是很无聊，我的手机上除了朋友圈和 QQ 空间，没有我感兴趣的媒体——我总不可能在走路的时候打开 B 站看视频。我也有过好几次因为走路时心不在焉地跟朋友聊天，自己不认真的态度激怒对方的经历。再加上手上拿着东西也不方便打字，我干脆就把手机揣兜里了。用这段时间想一些事情也好，不过我总是会忘记自己走路时思考过什么。&#xA;回到寝室，吃过饭之后，想着玩会游戏，便打开了《饥荒》，花了点时间打 Boss 和装修基地，然后就下线了。时间是两点多一点，我想，以后把这段时间当作固定的游戏时间也不错。&#xA;因为是作业提交的最后一天，除了我一拖再拖的期末复习，我也没有别的事情要做了，所以我打开了 WSL 和 Visual Studio Code 开始做 C 语言作业。被指针和结构体折腾得脑袋发昏，想着这大概是因为自己头脑不太清醒，再加上另一个室友也在写代码，嘴里满是抱怨、不满、骂骂咧咧，和几乎每一个有姐姐的二胎男孩都有的一丝傲慢，总是让我打心底里感到厌恶，甚至是恶心。&#xA;写到这里我不禁想到，之前那个让我做了四年傻子的蠢货，也是他家里的弟弟，而他有两个姐姐。我不敢肯定所有的父母都会重男轻女，也不能十分幼稚地批评这些「家里最年幼的男孩」过于心高气傲，但我也不能否认，这类人的确没能给我留下太多的好印象。&#xA;我或许应该去图书馆的，不过为时已晚，我已经没了做作业的心情。反正是最后一次，而我的 C 语言老师似乎也从来没检查过作业，于是我关掉了代码编辑器，拿出昨天吃剩下的零食，接着看午饭时的没看完的《生活大爆炸》。&#xA;我有一个奇怪的习惯，我的休息时间和我吃东西的时间是绑定的，我一吃完零食，就会理所当然地把视频关掉开始做别的事情。不过今天我没什么可做，或者说，应该是没什么想做，我清单上的项目和几本没复习完的书都让我觉得没动力。&#xA;我又推开阳台的门，打开水龙头洗去留在手上的油渍，发现今早泡在盆里的衣物还没洗，于是简单地用手搓了搓，拧干净水，在被挤满的晾衣杆上给它腾了个空位。我回到房间，又拿出那本书，泡了一杯咖啡，茉莉花味的，爬上了我的床，打开床上的灯，开始阅读今天的第二篇散文。&#xA;毫无必要的热情，就和这本书一样，今天确实是冷淡的一天。我不觉得有多精彩，也没有无聊到想要把自己的头皮撕掉；我没怎么开口说过话，甚至也没有和网上的朋友聊过天。这样毫无亮点的一天，意外地值得记录。&#xA;不知不觉我又拿出之前用作书签的那张牌端详起来，拿出手机搜索，得知 Lapin 的确是兔子的意思，但不是拉丁语，而是法语。&#xA;2024 年 1 月 7 日记</description>
    </item>
    <item>
      <title>新时代独立博客走弯路式搭建的最佳实践</title>
      <link>http://localhost:1313/posts/%E6%96%B0%E6%97%B6%E4%BB%A3%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E8%B5%B0%E5%BC%AF%E8%B7%AF%E5%BC%8F%E6%90%AD%E5%BB%BA%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Fri, 08 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E6%96%B0%E6%97%B6%E4%BB%A3%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E8%B5%B0%E5%BC%AF%E8%B7%AF%E5%BC%8F%E6%90%AD%E5%BB%BA%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;p&gt;我已经不记得这是自己第几次重写博客的代码，但我很确定这是（短时间内）最后一次了。无论如何，是时候给我这在自定义性、易维护性和成本三者之间找不到任何平衡点的完美主义画上一个暂时的句号了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;重写的原因&#34;&gt;重写的原因&lt;/h2&gt;&#xA;&lt;p&gt;因为越来越看不惯旧博客的页面设计，我决定直接推翻重新设计。但在我这么做之前，我突然意识到我已经有好久没更新博客了，最近的更新还都是一些写得让人摸不着头脑的小说，而且大部分是直接搬运自我在另一个网站的创作——总之，我已经很久没有静下心来认真地写博客了。我认为时不时用较长篇幅的文字记录一下自己在某方面的摸索历程还是很有必要的，这和我做手帐时的日常记录有很大区别，针对事物本身而非时间的记述能帮助我在理清思路的同时加深记忆。&lt;/p&gt;&#xA;&lt;p&gt;我不小心丢掉了写博客的这个习惯，有很大原因是更新静态博客时繁琐的操作流程。我前几次重写博客代码，使用的都是纯粹的 Next.js 或者 Svelte 框架，算是一种「无服务器」（Serverless）的应用。由于没有数据库，博客所有的文章都以 Markdown 文件的形式，和博客的源代码储存在一起。这就导致，在我需要更新博客的时候，我要先在一个 Markdown 文件里写好文章内容，还要在文件的开头编写必须的 Front Matter 用于表示文章标题、创建日期、标签等元信息（而且我每次都记不住格式和属性的命名，要先找到以前的文件，然后复制到新的文件里）。当文件准备好之后，我要把它放进 Git 仓库里对应的目录下，在本地运行 &lt;code&gt;npm run dev&lt;/code&gt; 测试是否会产生问题，无误后推送到 GitHub 并等待 Vercel 将新的博客版本部署在生产环境中。之后，如果我还需要修改文章内的某些错误，或者进行额外的更新，我无法在移动设备上进行这些操作，我需要打开我的电脑，打开 GitHub Desktop 和 VS Code，编辑我的内容，然后测试，再推送，再等待部署。&lt;/p&gt;&#xA;&lt;p&gt;初次接触静态博客的开发者可能会觉得这很有意思，很极客，但我很快就厌倦了，因为有的时候我只是想要写一篇文章传达一些想法或者是纯粹地记录，可我却需要打开一个光是看着就觉得自己要开始写 Bug 的界面，然后再进行一系列十分「黑客」的操作，才能发表我的文章。&lt;strong&gt;这简直太反人类了。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;为了保留写博客的好习惯，同时不委屈自己，我决定重写一个让自己觉得更舒服的博客系统。&lt;/p&gt;&#xA;&lt;h2 id=&#34;我的思路&#34;&gt;我的思路&lt;/h2&gt;&#xA;&lt;p&gt;我需要一个功能齐全的图形化博客管理后台，但我不想自己造轮子，也不想用市面上花里胡哨的 CMS 来「大炮打蚊子」，我只是想要一个简单、易上手的，适用于个人博客的内容管理程序。&lt;/p&gt;&#xA;&lt;p&gt;符合这个描述的，答案当然是——&lt;strong&gt;Typecho&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;不过问题是，Typecho 是一个用 PHP 编写的，前后端一体的博客程序。对我这个已经享受过用 JavaScript 写前端是多么舒爽的人而言，回到 PHP 时代无异于现代人到山里住岩洞，我还得重新适应 PHP 并重新写一个博客主题。这实在是令我不能接受。&lt;/p&gt;&#xA;&lt;p&gt;我既想享受传统博客傻瓜式操作带来的便利，又不愿意离开现代化前端开发的优雅和高效。那么解决方案就很明显了——使用一个无头 CMS，同时重新设计博客的前端。但问题又回来了，市面上大部分的无头 CMS 都有些臃肿，或者说是相对于我要解决的问题，它们都具备了太多我不需要的功能。不过，Typecho 虽然不能作为无头 CMS 使用，但它的量级却刚刚好满足我的需求。&lt;/p&gt;&#xA;&lt;p&gt;那么，我只需要想办法把 Typecho 变成一个无头 CMS，一切问题就都引刃而解了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;开始实践&#34;&gt;开始实践&lt;/h2&gt;&#xA;&lt;p&gt;我很容易就找到了 &lt;a href=&#34;https://github.com/moefront/typecho-plugin-Restful&#34;&gt;一个现有的插件&lt;/a&gt;，它能为 Typecho 提供 RESTful 化的 API。这样一来，Typecho 就能作为纯粹的后端为我自己设计的前端提供数据了，而我只需要在 Typecho 的控制台更新博客内容就行了。&lt;/p&gt;&#xA;&lt;p&gt;接下来，我只需要把重点放在前端的设计上就好了。&lt;/p&gt;&#xA;&lt;h3 id=&#34;选择工具&#34;&gt;选择工具&lt;/h3&gt;&#xA;&lt;p&gt;我决定使用我熟悉的 Next.js 编写前端，因为我决定把前端托管在 Vercel 上，而 Vercel 的 Next.js 的支持显然更好。&lt;/p&gt;&#xA;&lt;p&gt;在 CSS-in-JS 这方面，我选择了最近很火的 Tailwind.css 而不是自己用 SCSS 手写每一个类。一方面，新版本的 Next.js 默认支持 Tailwind.css，省去了自己配置的时间；另一方面，有了 React 对模块化开发的支持，每个相同或相似的元素都可以被编写成组件，在 CSS 层面做到语义化就显得有些没必要了，这时候有更方便快捷的方法当然是最好的。&lt;/p&gt;&#xA;&lt;p&gt;顺带一提，我有好一段时间没用 Next.js，上一版博客（Isla）使用的是 Svelte。新版本的 Next.js 添加了新的页面路由方法，即 App Router，与以往的 Page Router 区分开来。照理来说使用 App Router 是更好的，但刚回坑的我显然还没有反应过来，所以继续采用 Page Router 编写博客。不过，能跑就行。&lt;/p&gt;&#xA;&lt;p&gt;像是 React Icons 图标库这样的额外工具就没必要提了。&lt;/p&gt;&#xA;&lt;h3 id=&#34;获取文章&#34;&gt;获取文章&lt;/h3&gt;&#xA;&lt;p&gt;使用 Next.js Page Router 提供的 &lt;code&gt;getStaticProps()&lt;/code&gt; 函数可以在页面加载之前获取来自无头 CMS 的数据。使用 &lt;code&gt;fetch()&lt;/code&gt; 获取 API 内容，记得使用 &lt;code&gt;await&lt;/code&gt; 关键词。&lt;/p&gt;&#xA;&lt;p&gt;插件提供的 RESTful 风格的 API 可以直接用 json 解析，不要忘记解析时也需要加上 &lt;code&gt;await&lt;/code&gt; 关键词。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;function&lt;/span&gt; getStaticProps() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;const&lt;/span&gt; res = &lt;span style=&#34;font-weight:bold&#34;&gt;await&lt;/span&gt; fetch(&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;https://blog.guhub.cn/api/posts&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;const&lt;/span&gt; posts = &lt;span style=&#34;font-weight:bold&#34;&gt;await&lt;/span&gt; res.json()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; { props: { posts } }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成之后将文章列表数据作为 &lt;code&gt;Props&lt;/code&gt; 返回给主函数即可。&lt;/p&gt;&#xA;&lt;p&gt;不过，在这里我遇到了一个后端的问题，代码这样正常跑了数十次之后我才发现前端只展示了前五篇文章，原因是插件给 API 提供了分页功能，每页默认五篇，需要在 URL Query 中用 &lt;code&gt;?page=&lt;/code&gt; 标明正在查看第几页。不过我目前的设计并不需要分页功能，所以我用 API 提供的另一个方法增加了每页显示的文章数量，算是一个比较蠢的解决方案。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;const&lt;/span&gt; res = &lt;span style=&#34;font-weight:bold&#34;&gt;await&lt;/span&gt; fetch(&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;https://blog.guhub.cn/api/posts?pageSize=9999&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;展示文章&#34;&gt;展示文章&lt;/h3&gt;&#xA;&lt;p&gt;从后端得到的数据中，重要的数据在 data.dataSet 下，里面包含了文章的标题、创建时间戳、CID、分类、Slug 等。值得一提的名为 &lt;code&gt;digest&lt;/code&gt; 的属性，这个和 Typecho 的设置挂钩，如果设置了在首页展示完整的 &lt;code&gt;$this-&amp;gt;content()&lt;/code&gt;，&lt;code&gt;digest&lt;/code&gt; 就会包含全文内容的 HTML 字符串而不只是摘要。这个插件在文章列表的 API 中没有专门输出全文内容的属性，如果在 &lt;code&gt;digest&lt;/code&gt; 只输出摘要的情况下需要获取全文，就要用 slug 或者 cid 等唯一的属性到另一个路径中获取更详细的文章信息。&lt;/p&gt;&#xA;&lt;p&gt;这显然有些太麻烦了，于是我决定不更改 Typecho 的设置，把 &lt;code&gt;digest&lt;/code&gt; 当作全文内容使用。不过，我仍然有在文章列表输出真正的摘要的需求，这就意味着我需要在前端截取一段摘要。&lt;/p&gt;&#xA;&lt;p&gt;我是这样实现的：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;</description>
    </item>
    <item>
      <title>重复在剥离意义</title>
      <link>http://localhost:1313/posts/%E9%87%8D%E5%A4%8D%E5%9C%A8%E5%89%A5%E7%A6%BB%E6%84%8F%E4%B9%89/</link>
      <pubDate>Fri, 09 Dec 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E9%87%8D%E5%A4%8D%E5%9C%A8%E5%89%A5%E7%A6%BB%E6%84%8F%E4%B9%89/</guid>
      <description>|重复在剥离意义&#xA;你在写日记，你想描述你今天看到的花很漂亮，于是你写下：“我从未见过如此美丽的花朵。”&#xA;你在餐馆享用晚餐，你吃到了以前从没吃过的一道菜，于是你感叹：“如此美味的菜肴啊！”&#xA;你在写作业，眼看已经到午夜了，你抱怨道：“作业每天都如此多！”&#xA;你突然觉得有些不对劲，因为你想到「如此」和「这么」一样，意思是「像这样地」，而在很多时候，你似乎都喜欢把它当作「很」和「非常」这些修饰词的平替，即使它本身并没有加强语气的意思，即使在你说出这句话的语境下并没有强调所描述物品是「像这样的」的必要。&#xA;你又想到，就算是「很」和「非常」这样普通的词也有些过于常见了，比如人们在描述一件体积很大的物品时，无论它「大」的程度是否足以被加强，都习惯在「大」字前面加上一个「很」字。人们不会说「我的工作量是大的」，而是更倾向于说「我的工作量很大」。&#xA;看起来，「很」这个字似乎失去了它原本的含义，成为了形容词之前应该有的占位符。&#xA;你有一个朋友，你们每天都在一起聊天。&#xA;有一天你们在讨论 Elon Musk 接管推特的事情，你听到他说：“还是那句话，推特迟早要倒闭。”&#xA;你有些疑惑，不是因为推特倒闭的事情，是因为他说“还是那句话”，而你从来没有听他说过他“还是那句”的话。于是你问他是什么时候还说过这句话，他回答道：&#xA;“没说过啊，但是说话之前加一句‘还是那句话’就会让人觉得这句话很有道理。”&#xA;你只能点头表示同意，因为你没有办法反驳，“还是那句话”确实会让一句话听起来像是被重复了很多遍，而被人说过很多遍的话似乎都很有道理。&#xA;“还是那句话”好像也失去了它原本的含义。&#xA;你听朋友说：“发明 yyds 这个词的人已经进监狱了。”&#xA;你有些疑惑，于是他接着解释。&#xA;“是一个主播因为直播间有人说他是「永远的神」，所以他就开始经常说自己是「永远的神」，然后就有了 yyds 这个梗。然后这个主播因为开赌场被抓了。”&#xA;你有些惊讶，「yyds」居然也能算是一个梗吗？&#xA;“不然呢？大家都在这么说。”&#xA;你又想，最近「yyds」的标准好像越来越低了，好像无论什么人只要做了一件出众的事就能被称作「神」。这个本来是对那些至高无上，无人能敌的存在的称呼，在「yyds」面前显得十分无力。&#xA;或许「神」的意义被弱化了。&#xA;你的思绪又回到了话题的开始，“发明 yyds 这个词的人已经进监狱了”，这句话似乎并不准确，因为发明「yyds」的人实际上是那位主播的粉丝。&#xA;你正想找朋友说这件事，但当你在刷视频的时候在评论区看到了完全相同的一句话时，你就什么都明白了。&#xA;你又刷到了一个视频，大概内容是一个说话只会玩梗的人被另一个人批评“没有自己的观点”，然后被骂得说不出话的剧情。&#xA;“没有科技与狠活，直接开干了家人们！”&#xA;“拜托，这真的超酷的好吗？”&#xA;“我真的栓 Q。”&#xA;“我真的会谢。”&#xA;“完了，这下芭比 Q 了。”&#xA;“退！退！退！”&#xA;你不得不承认，这些梗一开始挺好玩的，但你看到视频里的那个「梗小鬼」除了玩梗说不出一句人话，完全没有自己的观点，这不仅让你开始反思，人们是否在公式化语言？&#xA;“网络流行梗破坏语言多样性”的断言已经烂大街了，但是，你不禁又想到，这样的言论被人们引用，翻来覆去地说了一遍又一遍，却很少有人指出多样性缺失的危害，人们只是喊着同样的一句口号来反对梗文化，但目的呢？被反对者看不懂，反对者自己也看不到。似乎这句话存在的意义就是存在，是为了让人有观点可站，有架可吵的。&#xA;这句话本身是在反对「公式化语言」，但可笑的是，它自己也成为了公式，成为了人们喊的一句口号。如果你也是一个梗小鬼，那你大概会说：“呵呵，终究还是成为了自己讨厌的人。”&#xA;Don&amp;rsquo;t you just love how META it is?&#xA;人们看到了口号，觉得呼号人的演说很有力度，便相信了这个口号，似乎事情就应该是口号说的那样；有些人相信了不一样的口号，面对其他口号的信徒，他们破口大骂，但是骂的是什么呢？是口号。到头来，人们的观点都被几句口号操控了。&#xA;你观看了一场演讲，主题是有关性别气质的。&#xA;演讲的内容很深刻，谈到了社会性别形成的原因，社会构建性别之类的东西，但令你影响最深的是演讲人提到了：男性要阳刚，女性要阴柔，不过是人们喊的一句口号。接着，他说：&#xA;“口号一出现，思考就停止了。”&#xA;几乎是所有人，听到这句话都情不自禁地为他欢呼，用掌声认同他的观点。因为你看的是视频，所以你看到弹幕和评论区里也都是这句话。&#xA;此时，你不禁后背发凉。&#xA;“‘口号一出现，思考就停止了’这句话，不也是人们喊的一句口号吗？”&#xA;似乎人类永远逃不出语言的重复，总是在不可避免地剥离文字的意义，过分的重复和强调正在让文字变得无力，更坏，这正在让人类失去思考的能力。&#xA;我最近在写 Backrooms 的文章，在后室 Wikidot 中文站发布了一些作品，偶尔也会去论坛看看其他人的草稿，提出一些修改建议。一天我在看草稿的时候，发现一位写手写了这样的一句话：&#xA;目前无法计算药物数量。此外，并不排除药物是无限的。&#xA;这句话有很明显的问题，「此外」的意思是「除开这点以外」，也就是「抛开这点不谈」。那么，这一句话的意思就是：&#xA;目前无法计算药物数量。不谈药物数量的话，药物的数量可能是无限的。&#xA;这是一个可笑的错误，看起来作者根本没有理解「此外」这个词的意思。不过这又让我思考：为什么他不理解「此外」这个词，却还要使用它呢？答案很简单，因为 Backrooms 系列的大部分作品的语言风格都偏向于类似 SCP 基金会的「临床腔」，追求语言的严谨性与逻辑，所以「此外」这样的字眼就经常出现在作品中。这个作者应该就是经常在他人的作品里读到「此外」一词，而错误地把它当作了一个普通的关联词使用，而没有深究它的含义。</description>
    </item>
    <item>
      <title>午夜吻我</title>
      <link>http://localhost:1313/posts/%E5%8D%88%E5%A4%9C%E5%90%BB%E6%88%91/</link>
      <pubDate>Fri, 09 Sep 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%8D%88%E5%A4%9C%E5%90%BB%E6%88%91/</guid>
      <description>星稀的夜空只见黑猫的双眸&#xA;橙色的夜灯瞥见绿叶的泪珠&#xA;孤身的我不见你的影子&#xA;凌晨的街道，公园的长椅&#xA;地面的余温，扶手的触感&#xA;道旁的野草，不可名状的香气&#xA;不自觉地踏起 这孤独之舞&#xA;往身后看看吧&#xA;那人，或许就在电杆的后面&#xA;或许正在树顶眺望&#xA;又或许，他哪也不在&#xA;藏在了衣柜的深处&#xA;等着在某个这样的午夜&#xA;给我一个吻</description>
    </item>
  </channel>
</rss>
